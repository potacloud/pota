// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NetworksClient is the client API for Networks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworksClient interface {
	CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*CreateNetworkResponse, error)
	ListNetwork(ctx context.Context, in *ListNetworkRequest, opts ...grpc.CallOption) (*ListNetworkResponse, error)
	DetailNetwork(ctx context.Context, in *DetailNetworkRequest, opts ...grpc.CallOption) (*DetailNetworkResponse, error)
	UpdateNetwork(ctx context.Context, in *UpdateNetworkRequest, opts ...grpc.CallOption) (*UpdateNetworkResponse, error)
	DeleteNetwork(ctx context.Context, in *DeleteNetworkRequest, opts ...grpc.CallOption) (*DeleteNetworkResponse, error)
}

type networksClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworksClient(cc grpc.ClientConnInterface) NetworksClient {
	return &networksClient{cc}
}

func (c *networksClient) CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*CreateNetworkResponse, error) {
	out := new(CreateNetworkResponse)
	err := c.cc.Invoke(ctx, "/networks.Networks/CreateNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networksClient) ListNetwork(ctx context.Context, in *ListNetworkRequest, opts ...grpc.CallOption) (*ListNetworkResponse, error) {
	out := new(ListNetworkResponse)
	err := c.cc.Invoke(ctx, "/networks.Networks/ListNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networksClient) DetailNetwork(ctx context.Context, in *DetailNetworkRequest, opts ...grpc.CallOption) (*DetailNetworkResponse, error) {
	out := new(DetailNetworkResponse)
	err := c.cc.Invoke(ctx, "/networks.Networks/DetailNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networksClient) UpdateNetwork(ctx context.Context, in *UpdateNetworkRequest, opts ...grpc.CallOption) (*UpdateNetworkResponse, error) {
	out := new(UpdateNetworkResponse)
	err := c.cc.Invoke(ctx, "/networks.Networks/UpdateNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networksClient) DeleteNetwork(ctx context.Context, in *DeleteNetworkRequest, opts ...grpc.CallOption) (*DeleteNetworkResponse, error) {
	out := new(DeleteNetworkResponse)
	err := c.cc.Invoke(ctx, "/networks.Networks/DeleteNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworksServer is the server API for Networks service.
// All implementations must embed UnimplementedNetworksServer
// for forward compatibility
type NetworksServer interface {
	CreateNetwork(context.Context, *CreateNetworkRequest) (*CreateNetworkResponse, error)
	ListNetwork(context.Context, *ListNetworkRequest) (*ListNetworkResponse, error)
	DetailNetwork(context.Context, *DetailNetworkRequest) (*DetailNetworkResponse, error)
	UpdateNetwork(context.Context, *UpdateNetworkRequest) (*UpdateNetworkResponse, error)
	DeleteNetwork(context.Context, *DeleteNetworkRequest) (*DeleteNetworkResponse, error)
	mustEmbedUnimplementedNetworksServer()
}

// UnimplementedNetworksServer must be embedded to have forward compatible implementations.
type UnimplementedNetworksServer struct {
}

func (UnimplementedNetworksServer) CreateNetwork(context.Context, *CreateNetworkRequest) (*CreateNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetwork not implemented")
}
func (UnimplementedNetworksServer) ListNetwork(context.Context, *ListNetworkRequest) (*ListNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetwork not implemented")
}
func (UnimplementedNetworksServer) DetailNetwork(context.Context, *DetailNetworkRequest) (*DetailNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailNetwork not implemented")
}
func (UnimplementedNetworksServer) UpdateNetwork(context.Context, *UpdateNetworkRequest) (*UpdateNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNetwork not implemented")
}
func (UnimplementedNetworksServer) DeleteNetwork(context.Context, *DeleteNetworkRequest) (*DeleteNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetwork not implemented")
}
func (UnimplementedNetworksServer) mustEmbedUnimplementedNetworksServer() {}

// UnsafeNetworksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworksServer will
// result in compilation errors.
type UnsafeNetworksServer interface {
	mustEmbedUnimplementedNetworksServer()
}

func RegisterNetworksServer(s grpc.ServiceRegistrar, srv NetworksServer) {
	s.RegisterService(&Networks_ServiceDesc, srv)
}

func _Networks_CreateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworksServer).CreateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networks.Networks/CreateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworksServer).CreateNetwork(ctx, req.(*CreateNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networks_ListNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworksServer).ListNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networks.Networks/ListNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworksServer).ListNetwork(ctx, req.(*ListNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networks_DetailNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworksServer).DetailNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networks.Networks/DetailNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworksServer).DetailNetwork(ctx, req.(*DetailNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networks_UpdateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworksServer).UpdateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networks.Networks/UpdateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworksServer).UpdateNetwork(ctx, req.(*UpdateNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networks_DeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworksServer).DeleteNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networks.Networks/DeleteNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworksServer).DeleteNetwork(ctx, req.(*DeleteNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Networks_ServiceDesc is the grpc.ServiceDesc for Networks service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Networks_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "networks.Networks",
	HandlerType: (*NetworksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNetwork",
			Handler:    _Networks_CreateNetwork_Handler,
		},
		{
			MethodName: "ListNetwork",
			Handler:    _Networks_ListNetwork_Handler,
		},
		{
			MethodName: "DetailNetwork",
			Handler:    _Networks_DetailNetwork_Handler,
		},
		{
			MethodName: "UpdateNetwork",
			Handler:    _Networks_UpdateNetwork_Handler,
		},
		{
			MethodName: "DeleteNetwork",
			Handler:    _Networks_DeleteNetwork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "networks.proto",
}
